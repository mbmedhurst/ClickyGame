{"version":3,"sources":["components/TopNav/TopNav.js","components/ImgButton/ImgButton.js","App.js","serviceWorker.js","index.js"],"names":["TopNav","_this$props","this","props","score","goodGuess","topScoreArr","react_default","a","createElement","style","flexGrow","AppBar","position","backgroundColor","Toolbar","Grid","container","spacing","textAlign","item","xs","Typography","variant","color","fontWeight","large","Component","ImgBtn","imgArr","handleClickImage","id","margin","map","img","Button","className","height","width","marginBottom","onClick","maxWidth","maxHeight","src","alt","App","state","guesses","handleShuffle","_","_this","shuffle","setState","handleEvaluateMatch","indexOf","concat","Object","toConsumableArray","Fragment","components_TopNav_TopNav","ImgButton_ImgButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17f706ef.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport Grid from '@material-ui/core/Grid'\n// npm package which finds largest number in an array\nimport large from 'largest-element'\n\nclass TopNav extends Component {\n    render() {\n        const { score, goodGuess, topScoreArr } = this.props\n\n        return (\n            <div style={{ flexGrow: 1 }}>\n                <AppBar position=\"static\" style={{ backgroundColor: '#f5844a' }}>\n                    <Toolbar>\n                        <Grid container spacing={3} style={{ textAlign: 'center' }}>\n                            <Grid item xs={4}>\n                                <Typography variant=\"h6\" color=\"inherit\" style={{ fontWeight: 'bold' }}>\n                                    Clicky Game\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={4}>\n                                <Typography variant=\"h6\" color=\"inherit\">\n                                    {this.props.goodGuess}\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={4}>\n                                <Typography variant=\"h6\" color=\"inherit\">\n                                    Score: {this.props.score} | Top Score: {large(this.props.topScoreArr)}\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                    </Toolbar>\n                </AppBar>\n            </div>\n        )\n    }\n}\n\nexport default TopNav\n","import React, { Component } from 'react'\nimport './ImgButton.css'\nimport Button from '@material-ui/core/button'\n// npm package to create shake effect\n\nclass ImgBtn extends Component {\n    render() {\n        const { imgArr, handleClickImage } = this.props\n        \n\n        return (\n                <div id='container' style={{ margin: '50px 250px' }}> {\n                    imgArr.map(img => {\n                        return <Button className='imgBtn' style={{ height: '120px', width: '160px', marginBottom: '20px' }} onClick={() => handleClickImage(img)}>\n                            <img className='image' style={{ maxWidth: '100%', maxHeight: '100%' }} src={img} alt='landmark'></img>\n                        </Button>\n                    })\n                }\n                </div>\n        )\n    }\n}\n\nexport default ImgBtn\n","import React, { Component } from 'react'\nimport './App.css'\nimport TopNav from './components/TopNav'\nimport ImgBtn from './components/ImgButton'\n// npm package which shuffles an array\nimport shuffle from 'shuffle-array'\n\n\nclass App extends Component {\n  state = {\n    imgArr: [\n      'https://assets.fnlondon.com/2016/10/IMG013025_full4x3.jpg?width=620&height=465',\n      'https://www.readersdigest.ca/wp-content/uploads/sites/14/2017/06/american-landmarks-statue-of-liberty.jpg',\n      'https://media-cdn.sygictraveldata.com/media/800x600/612664395a40232133447d33247d3832343638393835',\n      'https://media.cntraveler.com/photos/5539216cab60aad20f3f3aaa/4:3/w_480,c_limit/eiffel-tower-paris-secret-apartment.jpg',\n      'https://assets.classicfm.com/2012/42/brandenburg-gate-1350560062-view-0.jpg',\n      'https://img.etimg.com/thumb/msid-67205335,width-643,imgsize-796545,resizemode-4/big-ben.jpg',\n      'https://d36tnp772eyphs.cloudfront.net/blogs/1/2019/02/Sydney-Opera-House_Side-angle-1200x856.jpg',\n      'https://cache-graphicslib.viator.com/graphicslib/page-images/742x525/462971_Viator_Thinkstock_169771.jpg',\n      'https://imgc.artprintimages.com/img/print/duomo-and-leaning-tower-pisa-italy_u-l-pdkpqx0.jpg?h=550&w=550&background=fbfbfb',\n      'https://afar-production.imgix.net/uploads/images/post_images/images/HYF1MFuVcs/original_7c04101b7056eaf1ff178aa8389a4b26.jpg?1459742764?ixlib=rails-0.3.0&auto=format%2Ccompress&crop=entropy&fit=crop&h=719&q=80&w=954',\n      'https://media-cdn.sygictraveldata.com/media/800x600/612664395a40232133447d33247d383432303438393437',\n      'https://news.berkeley.edu/wp-content/uploads/2019/04/DSC00733_Notre_Dame_Paris_from_east-e1556555780620.jpg',\n    ],\n    guesses: [],\n    score: 0,\n    topScoreArr: [0],\n    goodGuess: 'Click an image to begin!'\n  }\n\n  // function to shuffle the images\n  // this is working!\n  handleShuffle = _ => {\n    let imgArr = this.state.imgArr\n    shuffle(imgArr)\n    this.setState({ imgArr })\n  }\n\n  // function to handle click on an image\n  // this is working!\n  handleClickImage = (img) => {\n    let guesses = this.state.guesses\n    this.handleEvaluateMatch(img)\n    this.handleShuffle(img)\n  }\n\n  // function to handle scenarios depending on if image has already been clicked or not\n  handleEvaluateMatch = (img) => {\n    const { guesses } = this.state\n    if (guesses.indexOf(img) < 0) {\n      this.setState({\n        guesses: [...this.state.guesses, img],\n        goodGuess: 'You guessed correctly!',\n        score: this.state.score + 1,\n        topScoreArr: [...this.state.topScoreArr, this.state.score + 1]\n      })\n    } else {\n      this.setState({\n        guesses: [],\n        goodGuess: 'You guessed incorrectly!',\n        score: 0,\n      })\n    }\n  }\n  \n    render() {\n\n      return (\n        <>\n          <TopNav\n            score={this.state.score}\n            topScoreArr={this.state.topScoreArr}\n            goodGuess={this.state.goodGuess}\n          />\n\n          <ImgBtn\n            imgArr={this.state.imgArr}\n            handleClickImage={this.handleClickImage}\n          />\n        </>\n      )\n    }\n  }\n\n  export default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}